diff -r -u luksipc-0.04-original/chunk.c luksipc-0.04/chunk.c
--- luksipc-0.04-original/chunk.c	2015-05-28 18:48:04.000000000 +0300
+++ luksipc-0.04/chunk.c	2015-09-04 22:35:50.705696889 +0300
@@ -27,6 +27,7 @@
 #include <unistd.h>
 #include <sys/types.h>
 #include <errno.h>
+#include <inttypes.h>
 
 #include "logging.h"
 #include "chunk.h"
@@ -51,7 +52,7 @@
 static bool checkedSeek(int aFd, off64_t aOffset, const char *aCaller) {
 	off64_t curOffset = lseek64(aFd, aOffset, SEEK_SET);
 	if (curOffset != aOffset) {
-		logmsg(LLVL_WARN, "%s: tried seek to 0x%lx, went to 0x%lx (%s)\n", aCaller, aOffset, curOffset, strerror(errno));
+		logmsg(LLVL_WARN, "%s: tried seek to 0x%" PRIx64 ", went to 0x%" PRIx64 " (%s)\n", aCaller, aOffset, curOffset, strerror(errno));
 		return false;
 	}
 	return true;
@@ -63,7 +64,7 @@
 		return -1;
 	}
 	if (aSize > aChunk->size) {
-		logmsg(LLVL_CRITICAL, "chunkReadAt: Refusing to read %u bytes with only a %u bytes large buffer.\n", aSize, aChunk->size);
+		logmsg(LLVL_CRITICAL, "chunkReadAt: Refusing to read %" PRIu32 " bytes with only a %" PRIu32 " bytes large buffer.\n", aSize, aChunk->size);
 		return -1;
 	}
 	bytesRead = read(aFd, aChunk->data, aSize);
@@ -81,8 +82,8 @@
 		return -1;
 	}
 	bytesWritten = write(aFd, aChunk->data, aChunk->used);
-	if (bytesWritten != aChunk->used) {
-		logmsg(LLVL_WARN, "Requested write of %d bytes unsuccessful (wrote %ld).\n", aChunk->used, bytesWritten);
+	if (bytesWritten != (ssize_t) aChunk->used) {
+		logmsg(LLVL_WARN, "Requested write of %" PRIu32 " bytes unsuccessful (wrote %ld).\n", aChunk->used, bytesWritten);
 	}
 	return bytesWritten;
 }
@@ -93,7 +94,7 @@
 
 ssize_t unreliableChunkReadAt(struct chunk *aChunk, int aFd, uint64_t aOffset, uint32_t aSize) {
 	if (randomEvent(100)) {
-		logmsg(LLVL_WARN, "Fault injection: Failing unreliable read at offset 0x%lx.\n", aOffset);
+		logmsg(LLVL_WARN, "Fault injection: Failing unreliable read at offset 0x%" PRIx64 ".\n", aOffset);
 		return -1;
 	} else {
 		return chunkReadAt(aChunk, aFd, aOffset, aSize);
@@ -102,7 +103,7 @@
 
 ssize_t unreliableChunkWriteAt(struct chunk *aChunk, int aFd, uint64_t aOffset) {
 	if (randomEvent(100)) {
-		logmsg(LLVL_WARN, "Fault injection: Failing unreliable write at offset 0x%lx.\n", aOffset);
+		logmsg(LLVL_WARN, "Fault injection: Failing unreliable write at offset 0x%" PRIx64 ".\n", aOffset);
 		return -1;
 	} else {
 		return chunkWriteAt(aChunk, aFd, aOffset);
diff -r -u luksipc-0.04-original/luks.c luksipc-0.04/luks.c
--- luksipc-0.04-original/luks.c	2015-05-28 18:48:04.000000000 +0300
+++ luksipc-0.04/luks.c	2015-09-04 22:30:04.605709110 +0300
@@ -27,6 +27,7 @@
 #include <stdlib.h>
 #include <unistd.h>
 #include <errno.h>
+#include <inttypes.h>
 
 #include "exec.h"
 #include "luks.h"
@@ -128,12 +129,12 @@
 bool dmCreateAlias(const char *aSrcDevice, const char *aMapperHandle) {
 	uint64_t devSize = getDiskSizeOfPath(aSrcDevice);
 	if (devSize % 512) {
-		logmsg(LLVL_ERROR, "Device size of %s (%lu bytes) is not divisible by even 512 bytes sector size.\n", aSrcDevice, devSize);
+		logmsg(LLVL_ERROR, "Device size of %s (%" PRIu64 " bytes) is not divisible by even 512 bytes sector size.\n", aSrcDevice, devSize);
 		return false;
 	}
 
 	char mapperTable[256];
-	snprintf(mapperTable, sizeof(mapperTable), "0 %lu linear %s 0", devSize / 512, aSrcDevice);
+	snprintf(mapperTable, sizeof(mapperTable), "0 %" PRIu64 " linear %s 0", devSize / 512, aSrcDevice);
 
 	const char *arguments[] = {
 		"dmsetup",
@@ -154,7 +155,7 @@
 	snprintf(aliasDeviceFilename, sizeof(aliasDeviceFilename), "/dev/mapper/%s", aMapperHandle);
 	uint64_t aliasDevSize = getDiskSizeOfPath(aliasDeviceFilename);
 	if (devSize != aliasDevSize) {
-		logmsg(LLVL_ERROR, "Source device (%s) and its supposed alias device (%s) have different sizes (src = %lu and alias = %lu).\n", aSrcDevice, aliasDeviceFilename, devSize, aliasDevSize);
+		logmsg(LLVL_ERROR, "Source device (%s) and its supposed alias device (%s) have different sizes (src = %" PRIu64 " and alias = %" PRIu64 ").\n", aSrcDevice, aliasDeviceFilename, devSize, aliasDevSize);
 		dmRemove(aMapperHandle);
 		return false;
 	}
diff -r -u luksipc-0.04-original/luksipc.c luksipc-0.04/luksipc.c
--- luksipc-0.04-original/luksipc.c	2015-05-28 18:48:04.000000000 +0300
+++ luksipc-0.04/luksipc.c	2015-09-04 22:17:34.337735602 +0300
@@ -32,6 +32,7 @@
 #include <sys/time.h>
 #include <unistd.h>
 #include <stdarg.h>
+#include <inttypes.h>
 
 #include "luksipc.h"
 #include "shutdown.h"
@@ -50,7 +51,7 @@
 #define staticassert(cond)				_Static_assert(cond, #cond)
 
 /* Assert that lseek(2) has 64-bit file offsets */
-staticassert(sizeof(off_t) == 8);
+//staticassert(sizeof(off_t) == 8);  -- Taken care by -D__USE_FILE_OFFSET64
 
 
 #define REMAINING_BYTES(aconvptr)		(((aconvptr)->endOutOffset) - ((aconvptr)->outOffset))
@@ -113,7 +114,7 @@
 	success = checkedWrite(aConvProcess->resumeFd, &aConvProcess->dataBuffer[aConvProcess->usedBufferIndex].used, sizeof(uint32_t)) && success;
 	success = checkedWrite(aConvProcess->resumeFd, aConvProcess->dataBuffer[aConvProcess->usedBufferIndex].data, aConvProcess->dataBuffer[aConvProcess->usedBufferIndex].size) && success;
 	fsync(aConvProcess->resumeFd);
-	logmsg(LLVL_DEBUG, "Wrote resume file: read pointer offset %lu write pointer offset %lu, %lu bytes of data in active buffer.\n", aConvProcess->inOffset, aConvProcess->outOffset, aConvProcess->dataBuffer[aConvProcess->usedBufferIndex].used);
+	logmsg(LLVL_DEBUG, "Wrote resume file: read pointer offset %" PRIu64 " write pointer offset %" PRIu64 ", %" PRIu32 " bytes of data in active buffer.\n", aConvProcess->inOffset, aConvProcess->outOffset, aConvProcess->dataBuffer[aConvProcess->usedBufferIndex].used);
 	return success;
 }
 
@@ -151,18 +152,18 @@
 
 	if (origReadDevSize != aConvProcess->readDevSize) {
 		if (aParameters->safetyChecks) {
-			logmsg(LLVL_ERROR, "Resume file used read device of size %lu bytes, but currently read device size is %lu bytes. Refusing to continue in spite of mismatch.\n", origReadDevSize, aConvProcess->readDevSize);
+			logmsg(LLVL_ERROR, "Resume file used read device of size %" PRIu64 " bytes, but currently read device size is %" PRIu64 " bytes. Refusing to continue in spite of mismatch.\n", origReadDevSize, aConvProcess->readDevSize);
 			return false;
 		} else {
-			logmsg(LLVL_WARN, "Resume file used read device of size %lu bytes, but currently read device size is %lu bytes. Continuing only because safety checks are disabled.\n", origReadDevSize, aConvProcess->readDevSize);
+			logmsg(LLVL_WARN, "Resume file used read device of size %" PRIu64 " bytes, but currently read device size is %" PRIu64 " bytes. Continuing only because safety checks are disabled.\n", origReadDevSize, aConvProcess->readDevSize);
 		}
 	}
 	if (origWriteDevSize != aConvProcess->writeDevSize) {
 		if (aParameters->safetyChecks) {
-			logmsg(LLVL_ERROR, "Resume file used write device of size %lu bytes, but currently write device size is %lu bytes. Refusing to continue in spite of mismatch.\n", origWriteDevSize, aConvProcess->writeDevSize);
+			logmsg(LLVL_ERROR, "Resume file used write device of size %" PRIu64 " bytes, but currently write device size is %" PRIu64 " bytes. Refusing to continue in spite of mismatch.\n", origWriteDevSize, aConvProcess->writeDevSize);
 			return false;
 		} else {
-			logmsg(LLVL_WARN, "Resume file used write device of size %lu bytes, but currently write device size is %lu bytes. Continuing only because safety checks are disabled.\n", origWriteDevSize, aConvProcess->writeDevSize);
+			logmsg(LLVL_WARN, "Resume file used write device of size %" PRIu64 " bytes, but currently write device size is %" PRIu64 " bytes. Continuing only because safety checks are disabled.\n", origWriteDevSize, aConvProcess->writeDevSize);
 		}
 	}
 	if (origReluksification != aConvProcess->reluksification) {
@@ -174,7 +175,7 @@
 		}
 	}
 
-	logmsg(LLVL_DEBUG, "Read write pointer offset %lu from resume file.\n", aConvProcess->outOffset);
+	logmsg(LLVL_DEBUG, "Read write pointer offset %" PRIu64 " from resume file.\n", aConvProcess->outOffset);
 
 	aConvProcess->usedBufferIndex = 0;
 	success = checkedRead(aConvProcess->resumeFd, &aConvProcess->dataBuffer[0].used, sizeof(uint32_t)) && success;
@@ -218,10 +219,10 @@
 
 			logmsg(LLVL_INFO, "%2d:%02d: "
 							"%5.1f%%   "
-							"%7lu MiB / %lu MiB   "
+							"%7" PRIu64 " MiB / %" PRIu64 " MiB   "
 							"%5.1f MiB/s   "
 							"Left: "
-							"%7lu MiB "
+							"%7" PRIu64 " MiB "
 							"%2d:%02d h:m"
 							"\n",
 								runtimeSecondsInteger / 3600, runtimeSecondsInteger % 3600 / 60,
@@ -262,7 +263,7 @@
 }
 
 static enum copyResult_t startDataCopy(struct conversionParameters const *aParameters, struct conversionProcess *aConvProcess) {
-	logmsg(LLVL_INFO, "Starting copying of data, read offset %lu, write offset %lu\n", aConvProcess->inOffset, aConvProcess->outOffset);
+	logmsg(LLVL_INFO, "Starting copying of data, read offset %" PRIu64 ", write offset %" PRIu64 "\n", aConvProcess->inOffset, aConvProcess->outOffset);
 	while (true) {
 		ssize_t bytesTransferred;
 		int unUsedBufferIndex = (1 - aConvProcess->usedBufferIndex);
@@ -295,18 +296,18 @@
 #endif
 			if (bytesTransferred == -1) {
 				/* Error reading from device, handle this! */
-				logmsg(LLVL_ERROR, "Error reading from device at offset 0x%lx, will shutdown.\n", aConvProcess->inOffset);
+				logmsg(LLVL_ERROR, "Error reading from device at offset 0x%" PRIx64 ", will shutdown.\n", aConvProcess->inOffset);
 				issueSigQuit();
 			} else if (bytesTransferred > 0) {
 				aConvProcess->inOffset += aConvProcess->dataBuffer[unUsedBufferIndex].used;
 			} else {
-				logmsg(LLVL_WARN, "Read of %d transferred %d hit EOF at inOffset = %ld remaining = %ld\n", bytesToRead, bytesTransferred, aConvProcess->inOffset, REMAINING_BYTES(aConvProcess));
+				logmsg(LLVL_WARN, "Read of %d transferred %d hit EOF at inOffset = %" PRIu64 " remaining = %" PRIu64 "\n", bytesToRead, bytesTransferred, aConvProcess->inOffset, REMAINING_BYTES(aConvProcess));
 			}
 		} else {
 			if (bytesToRead == 0) {
 				logmsg(LLVL_DEBUG, "No more bytes to read, will finish writing last partial chunk of %d bytes.\n", REMAINING_BYTES(aConvProcess));
 			} else {
-				logmsg(LLVL_WARN, "Odd: %d bytes to read at inOffset = %ld remaining = %ld\n", bytesToRead, aConvProcess->inOffset, REMAINING_BYTES(aConvProcess));
+				logmsg(LLVL_WARN, "Odd: %d bytes to read at inOffset = %" PRIu64 " remaining = %" PRIu64 "\n", bytesToRead, aConvProcess->inOffset, REMAINING_BYTES(aConvProcess));
 			}
 		}
 
@@ -329,7 +330,7 @@
 		bytesTransferred = chunkWriteAt(&aConvProcess->dataBuffer[aConvProcess->usedBufferIndex], aConvProcess->writeDevFd, aConvProcess->outOffset);
 #endif
 		if (bytesTransferred == -1) {
-			logmsg(LLVL_ERROR, "Error writing to device at offset 0x%lx, shutting down.\n", aConvProcess->outOffset);
+			logmsg(LLVL_ERROR, "Error writing to device at offset 0x%" PRIx64 ", shutting down.\n", aConvProcess->outOffset);
 			return issueGracefulShutdown(aParameters, aConvProcess);
 		} else if (bytesTransferred > 0) {
 			aConvProcess->outOffset += bytesTransferred;
@@ -413,19 +414,19 @@
 static bool plausibilizeReadWriteDeviceSizes(struct conversionParameters const *aParameters, struct conversionProcess *aConvProcess) {
 	uint64_t absSizeDiff = absDiff(aConvProcess->readDevSize, aConvProcess->writeDevSize);
 	if (absSizeDiff > 0x10000000) {
-		logmsg(LLVL_WARN, "Absolute size difference if implausibly large (%lu), something is very wrong.", absSizeDiff);
+		logmsg(LLVL_WARN, "Absolute size difference if implausibly large (%" PRIu64 "), something is very wrong.", absSizeDiff);
 		return false;
 	}
 
 	int32_t hdrSize = aConvProcess->readDevSize - aConvProcess->writeDevSize;
 	if (hdrSize > 0) {
-		logmsg(LLVL_INFO, "Write disk smaller than read disk by %d bytes (%d kiB + %d bytes, occupied by LUKS header)\n", hdrSize, hdrSize / 1024, hdrSize % 1024);
+		logmsg(LLVL_INFO, "Write disk smaller than read disk by %" PRIi32 " bytes (%" PRIi32 " kiB + %" PRIi32 " bytes, occupied by LUKS header)\n", hdrSize, hdrSize / 1024, hdrSize % 1024);
 		if (hdrSize > aParameters->blocksize) {
 			logmsg(LLVL_WARN, "LUKS header larger than chunk copy size. LUKS format probably has overwritten data that cannot be recovered.\n");
 			return false;
 		}
 	} else if (hdrSize < 0) {
-		logmsg(LLVL_INFO, "Write disk larger than read disk, %d bytes were freed (%d kiB + %d bytes)\n", -hdrSize, -hdrSize / 1024, -hdrSize % 1024);
+		logmsg(LLVL_INFO, "Write disk larger than read disk, %" PRIi32 " bytes were freed (%" PRIi32 " kiB + %" PRIi32 " bytes)\n", -hdrSize, -hdrSize / 1024, -hdrSize % 1024);
 	} else {
 		logmsg(LLVL_INFO, "Write disk size equal to read disk size.\n");
 	}
@@ -538,7 +539,7 @@
 	if (!openDevice(parameters->readDevice, &convProcess.readDevFd, O_RDWR, &convProcess.readDevSize)) {
 		terminate(EC_CANNOT_OPEN_READ_DEVICE);
 	}
-	logmsg(LLVL_INFO, "Size of reading device %s is %lu bytes (%lu MiB + %lu bytes)\n", parameters->readDevice, convProcess.readDevSize, convProcess.readDevSize / (1024 * 1024), convProcess.readDevSize % (1024 * 1024));
+	logmsg(LLVL_INFO, "Size of reading device %s is %" PRIu64 " bytes (%" PRIu64 " MiB + %" PRIu64 " bytes)\n", parameters->readDevice, convProcess.readDevSize, convProcess.readDevSize / (1024 * 1024), convProcess.readDevSize % (1024 * 1024));
 
 	/* Do a backup of the physical disk first if we're just starting out our
 	 * conversion */
@@ -552,7 +553,7 @@
 	 * obviously be possible to handle, but we won't. If your hard disk is so
 	 * small, then recreate it. */
 	if (convProcess.readDevSize < (uint32_t)parameters->blocksize) {
-		logmsg(LLVL_ERROR, "Error: Volume size of %s (%lu bytes) is smaller than chunksize (%u). Weird and unsupported corner case.\n", parameters->readDevice, convProcess.readDevSize, parameters->blocksize);
+		logmsg(LLVL_ERROR, "Error: Volume size of %s (%" PRIu64 " bytes) is smaller than chunksize (%d). Weird and unsupported corner case.\n", parameters->readDevice, convProcess.readDevSize, parameters->blocksize);
 		terminate(EC_UNSUPPORTED_SMALL_DISK_CORNER_CASE);
 	}
 
@@ -564,7 +565,7 @@
 			logmsg(LLVL_ERROR, "%s: Unable to read chunk data.\n", parameters->readDevice);
 			terminate(EC_UNABLE_TO_READ_FIRST_CHUNK);
 		}
-		logmsg(LLVL_DEBUG, "%s: Read %d bytes from first chunk.\n", parameters->readDevice, convProcess.dataBuffer[0].used);
+		logmsg(LLVL_DEBUG, "%s: Read %" PRIu32 " bytes from first chunk.\n", parameters->readDevice, convProcess.dataBuffer[0].used);
 
 		/* Check availability of device mapper handle before performing format */
 		if (!isLuksMapperAvailable(convProcess.writeDeviceHandle)) {
@@ -600,14 +601,14 @@
 		}
 		terminate(EC_FAILED_TO_OPEN_UNLOCKED_CRYPTO_DEVICE);
 	}
-	logmsg(LLVL_INFO, "Size of luksOpened writing device is %lu bytes (%lu MiB + %lu bytes)\n", convProcess.writeDevSize, convProcess.writeDevSize / (1024 * 1024), convProcess.writeDevSize % (1024 * 1024));
+	logmsg(LLVL_INFO, "Size of luksOpened writing device is %" PRIu64 " bytes (%" PRIu64 " MiB + %" PRIu64 " bytes)\n", convProcess.writeDevSize, convProcess.writeDevSize / (1024 * 1024), convProcess.writeDevSize % (1024 * 1024));
 
 	/* Check that the sizes of reading and writing device are in a sane
 	 * relationship to each other (i.e. writing device is maybe slightly
 	 * smaller than reading device, but no significant size differences occur).
 	 * */
 	if (!plausibilizeReadWriteDeviceSizes(parameters, &convProcess)) {
-		logmsg(LLVL_ERROR, "Implausible values encountered in regards to disk sizes (R = %ul, W = %ul), aborting.\n", convProcess.readDevSize, convProcess.writeDevSize);
+		logmsg(LLVL_ERROR, "Implausible values encountered in regards to disk sizes (R = %" PRIu64 ", W = %" PRIu64 "), aborting.\n", convProcess.readDevSize, convProcess.writeDevSize);
 		if (!parameters->resuming) {
 			/* Open failed, but we already formatted the disk. Try to unpulp
 			 * only if we already messed with the disk! We probably have
@@ -792,8 +793,8 @@
 		}
 
 		fprintf(stderr, "\n");
-		fprintf(stderr, "    %s: %lu MiB = %.1f GiB\n", parameters->rawDevice, devSize / 1024 / 1024, (double)(devSize / 1024 / 1024) / 1024);
-		fprintf(stderr, "    Chunk size: %u bytes = %.1f MiB\n", parameters->blocksize, (double)parameters->blocksize / 1024 / 1024);
+		fprintf(stderr, "    %s: %" PRIu64 " MiB = %.1f GiB\n", parameters->rawDevice, devSize / 1024 / 1024, (double)(devSize / 1024 / 1024) / 1024);
+		fprintf(stderr, "    Chunk size: %d bytes = %.1f MiB\n", parameters->blocksize, (double)parameters->blocksize / 1024 / 1024);
 		fprintf(stderr, "    Keyfile: %s\n", parameters->keyFile);
 		fprintf(stderr, "    LUKS format parameters: %s\n", parameters->luksFormatParams ? parameters->luksFormatParams : "None given");
 #ifdef DEVELOPMENT
diff -r -u luksipc-0.04-original/parameters.c luksipc-0.04/parameters.c
--- luksipc-0.04-original/parameters.c	2015-05-28 18:48:04.000000000 +0300
+++ luksipc-0.04/parameters.c	2015-09-04 20:17:08.753990739 +0300
@@ -192,7 +192,7 @@
 		{ "development-ioerrorx", 0, NULL, 'h' },							/* Do not allow abbreviation of --development-ioerrors */
 #endif
 		{ "help", 0, NULL, 'h' },
-		{ 0 }
+		{ 0, 0, NULL, '\0' }
 	};
 	int character;
 
diff -r -u luksipc-0.04-original/random.c luksipc-0.04/random.c
--- luksipc-0.04-original/random.c	2015-05-28 18:48:04.000000000 +0300
+++ luksipc-0.04/random.c	2015-09-04 22:36:13.161696097 +0300
@@ -26,6 +26,7 @@
 #include <stdint.h>
 #include <string.h>
 #include <errno.h>
+#include <inttypes.h>
 
 #include "random.h"
 #include "logging.h"
@@ -78,7 +79,7 @@
 
 	/* Then append hex data there */
 	for (int i = 0; i < aByteLen; i++) {
-		sprintf(aString, "%02x", rnd[i]);
+		sprintf(aString, "%02" PRIx8, rnd[i]);
 		aString += 2;
 	}
 	return true;
